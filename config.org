* Emacs Configuration
** Disabling some stuff
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(setq ring-bell-function 'ignore)
(defalias 'yes-or-no-p 'y-or-n-p)
(column-number-mode)
(global-display-line-numbers-mode t)

(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode m))))
#+END_SRC
** Changing the font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font" :height 180)
#+END_SRC
** Setup the backup dir
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs-saves")))
#+END_SRC
** Enable prettify symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode +1)
#+END_SRC
** Enable battery indicator
#+BEGIN_SRC emacs-lisp
(display-battery-mode 1)
#+END_SRC
* Evil mode 
#+BEGIN_SRC emacs-lisp
(use-package evil
	:ensure t
	:init
	(evil-mode 1))

(use-package evil-org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	    (lambda ()
            (evil-org-set-key-theme)))
    (evil-org-set-key-theme
	  '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode)))
    (require 'evil-org-agenda))

(use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-vim-color-theme))
#+END_SRC

* Ivy
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :init (ivy-mode 1))

(use-package ivy-rich
  :init (ivy-rich-mode 1))
#+END_SRC
* Counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil))
#+END_SRC
* Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
(setq org-src-preserve-indentation t)
(setq org-startup-folded t)
#+END_SRC
* Ranger
#+BEGIN_SRC emacs-lisp
(use-package ranger
    :ensure t
    :init
    (ranger-override-dired-mode t)
    :bind (("C-x C-d" . ranger)))
#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
    :ensure t
    :bind (("<f8>" . treemacs)))

(use-package treemacs-evil
    :ensure t)
#+END_SRC

* Multiple cursor
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
    :ensure t
    :bind (("C-<down>" . mc/mark-next-like-this)
        ("C-<up>" . mc/mark-previous-like-this)))

#+END_SRC

* PDF tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
    :ensure t
    :preface
    (pdf-tools-install))
#+END_SRC
* Emoji with emacs
#+BEGIN_SRC emacs-lisp
(use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+END_SRC
* Doom modeline
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
    :ensure t)
    
(use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-file-name-style 'auto)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-vcs-max-length 12)
    (setq doom-modeline-number-limit 99)
    (setq doom-modeline-lsp t))
#+END_SRC

* Programming
** Autocomplete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
    :ensure t
    :after (go-autocomplete)
    :config
    (require 'go-autocomplete)
    (ac-config-default))
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook
    (python-mode . lsp)
    (c-mode . lsp)
    (go-mode . lsp))
    
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC
** Haskell
*** Mode
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  :config
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode))
#+END_SRC
** C/C++
#+BEGIN_SRC emacs-lisp
;; Don't forget to install it with your package manager
(use-package ccls
    :ensure t
    :init
    (setq ccls-executable "/usr/bin/ccls"))
#+END_SRC

** Go
#+BEGIN_SRC emacs-lisp
(setenv "GOPATH" (concat "/home/" (getenv "USER") "/go"))

(use-package go-mode
    :ensure t)

(use-package go-autocomplete
    :ensure t)
#+END_SRC
