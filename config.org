#+TITLE: Emacs config
#+AUTHOR: Keyboard Slayer

** Keep folders clean
#+BEGIN_SRC elisp
(setq backup-directory-alist `(("." .,(expand-file-name "backups/" user-emacs-directory))))

(make-directory (expand-file-name "auto-saves/" user-emacs-directory) t)

(setq auto-save-list-file-prefix (expand-file-name "auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-saves/" user-emacs-directory) t)))

(setq create-lockfiles nil)
(setq user-emacs-directory (expand-file-name "~/.cache/emacs"))
#+END_SRC
** Disable Useless UI
#+BEGIN_SRC elisp
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq inhibit-startup-message t)
#+END_SRC
** Tweak UI
#+BEGIN_SRC elisp
(column-number-mode 1)
(setq display-time-day-and-date t)
(display-time-mode 1)
(global-display-line-numbers-mode t)
(display-battery-mode 1)
(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font" :height 160)
(set-face-attribute 'variable-pitch nil :font "CaskaydiaCove Nerd Font" :height 160)
(global-set-key (kbd "C-<tab>") 'next-buffer)
#+END_SRC
** Disable line numbers on certain mode
#+BEGIN_SRC elisp
(dolist (mode '(org-mode-hook
                 term-mode-hook
                 treemacs-mode-hook
                 eshell-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC
** Tweak Indentation
#+BEGIN_SRC elisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
(setq c-default-style "linux") 
(setq c-basic-offset 4) 
(c-set-offset 'comment-intro 0)
(electric-indent-mode -1)
#+END_SRC
** Package Managing
#+BEGIN_SRC elisp
(require 'package)
(setq package-enable-at-startup nil)
(package-initialize)
(setq package-archives
      '(("melpa" . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/melpa/")
        ("org"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/org/")
        ("gnu"   . "https://raw.githubusercontent.com/d12frosted/elpa-mirror/master/gnu/")))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t)
(setq use-package-compute-statistics t)
(setq package-check-signature nil)

(use-package diminish)
#+END_SRC

** Tweak Org
#+BEGIN_SRC elisp
(org-indent-mode)

(use-package org
  :hook (org-mode . (lambda () (org-indent-mode)
                      (variable-pitch-mode 1)
                      (auto-fill-mode 0)
                      (visual-line-mode 1)
                      (setq evil-auto-indent nil)))
  :custom 
  (org-adapt-indentation nil)
  (org-src-preserve-indentation t)
  (org-startup-folded t)
  (org-directory "~/Documents/Org")
  (org-agenda-start-with-log-mode t)
  (org-log-done 'timer)
  (org-agenda-files '("~/Documents/Org"))
  (org-log-into-drawer t))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

 (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

 (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "CaskaydiaCove Nerd Font" :weight 'regular :height (cdr face)))


(use-package visual-fill-column
    :defer t
    :ensure t
    :hook (org-mode . (lambda () (setq visual-fill-column-width 70
                           visual-fill-column-center-text t)
            (visual-fill-column-mode 1))))

#+END_SRC
** Evil Mode 
#+BEGIN_SRC elisp
(defun kbd/evil-hook ()
  (dolist (mode '(custom-mode
                  eshell-mode
                  git-rebase-mode
                  erc-mode
                  circe-server-mode
                  circe-chat-mode
                  circe-query-mode
                  sauron-mode
                  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))


(use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-i-jump nil)
    (evil-mode 1)
    :config
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

(use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC
** Which Key
#+BEGIN_SRC elisp
(use-package which-key
    :config
    (which-key-mode))
#+END_SRC
** Theme
#+BEGIN_SRC elisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t 
        doom-themes-enable-italic t)

  (doom-themes-org-config)
  (load-theme 'doom-vibrant t))
#+END_SRC 
** Ivy
#+BEGIN_SRC elisp
(use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :init (ivy-mode 1))

(use-package ivy-rich
  :init (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-l" . counsel-imenu)
         ("C-M-j" . counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (setq ivy-initial-inputs-alist nil))
#+END_SRC
** Doom modeline
#+BEGIN_SRC elisp
(use-package all-the-icons
    :ensure t)
    
(use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-file-name-style 'auto)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-major-mode-color-icon t)
    (setq doom-modeline-vcs-max-length 12)
    (setq doom-modeline-number-limit 99)
    (setq doom-modeline-lsp t))
#+END_SRC

** Rainbow Delimiter
#+BEGIN_SRC elisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Elfeed
#+BEGIN_SRC elisp
(use-package elfeed
    :config
     (setq-default elfeed-search-filter "@1-week-ago +unread ")
    :ensure t)

(setq elfeed-feeds (quote
                      (("https://www.reddit.com/r/devse.rss" reddit devse)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg" youtube linux)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCLhcQ0bBZTLipRJ7D42Riow" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UClcE-kVhqyiHCcjYwcpfj9w" youtube infosec)
                       ("https://www.youtube.com/feeds/vidoes.xml?channel_id=UCM0B2tvEttmL-gFP1_sgvSA" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA" youtube linux)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCQUMjdiwuIYbH-oveKmOdZg" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCkmEoZbpH7jPCe1_Ym4XJdQ" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCM64dJz1HdlmYlZ8xYSO8TA" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAR30oDTNbJE-Zd2NDg1mTQ" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCy27yRGCANDSrvQWzh5VuNA" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCK33kufuprDPsfRPkMfgoRA" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJcnvMekEXIlw4Q5o_aoiMw" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAcAnMF0OrCtUep3Y4M-ZPw" youtube fr news)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCgN1463ngpGdCpAbCBGFteg" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJcYRr8rpsxVPfWA5vkuxFw" youtube music comedy)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVeW9qkBjo3zosnqUbG7CFw" youtube infosec)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA" youtube linux)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCjFaPUcJU1vwk193mnW_w1w" youtube retrotech homebrew)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCS0N5baNlQWJCUrhCEo8WlA" youtube prog lowlevel)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCrh0I8I0l6eAj2DuW0GE_Fg" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UC599MoN2FAQyhHeopdKDHqA" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCfVczXnryp-xB2xBG3ocUgw" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UC-lHJZR3Gqxm24_Vd_AJ5Yw" youtube comedy)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCW6xlqxSY3gGur4PkGPEUeA" youtube infosec)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCJKdHhXovF8tsWa9bCKOZTg" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3S8vxwRfqLBdIhgRlDRVzw" youtube infosec)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCk20cSRhH_ms_Yk1AZItFqA" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCeeFfhMcJa1kjtfZAGskOCA" youtube tech news)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCYaSz9Ywjgv7J_Wjdx2Y37A" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCmcqSvN5dAHPOY5zVsLUrOg" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCjr2bPAyPV7t35MvcgT3W8Q" youtube infosec)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCEp20NgOZHmgWdbQdHSxgjw" youtube retrotech)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCEbYhDd6c6vngsF5PQpFVWg" youtube functional prog)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCsnGwSIHyoYN0kiINAGUKxg" youtube linux)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCkMYR1Nerqm5U6LQZpayMhg" youtube music)
                       ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVbRGNXwrOMEZ1qzGBPf-ow" youtube music)
                       ("https://www.reddit.com/r/osdev.rss" reddit prog))))
#+END_SRC

** Mpv
#+BEGIN_SRC elisp
(defun browse-url-mpv (url &optional new-window)
    (start-process "mpv" "*mpv*" "mpv" url))

(defun browse-url-surf (url &optional new-window)
    (start-process "surf" "*surf*" "surf" url))

(setq browse-url-browser-function '(("https:\\/\\/www\\.youtube." . browse-url-mpv)
    ("." . browse-url-surf)))
#+END_SRC

** Multiple Cursor
#+BEGIN_SRC elisp
(use-package multiple-cursors
    :ensure t
    :bind (("C-<down>" . mc/mark-next-like-this)
        ("C-<up>" . mc/mark-previous-like-this)))
#+END_SRC

** Projectile
#+BEGIN_SRC elisp
(use-package projectile
    :config (projectile-mode)
    :bind ("C-c k" . projectile-compile-project)
    :init
    (setq projectile-project-search-path '("~/Documents"))
    (setq projectile-switch-project-action #'projectile-dired))
#+END_SRC
** General
#+BEGIN_SRC elisp
(use-package general
    :ensure t
    :config
    (general-create-definer kbd/leader-keys
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")

    (kbd/leader-keys
        "D" '(dired-jump :which-key "Dired buffer directory")
        "d" '(projectile-dired :which-key "Dired into project")
        "x" '(projectile-run-shell :which-key "Run shell on project directory")
        "f" '(projectile--find-file :which-key "Find file in project")
        "t" '(treemacs-select-window :which-key "Treemacs")
        "c" '(centaur-tabs-mode :which-key "Enabled centaur-tabs")
        "s" '(projectile-switch-project :which-key "Switch project")))
#+END_SRC
** Makefile
#+BEGIN_SRC elisp
(use-package makefile-executor
  :config
  (add-hook 'makefile-mode-hook 'makefile-executor-mode))
#+END_SRC

** Magit
#+BEGIN_SRC elisp
(use-package magit
    :ensure t)
#+END_SRC

** LSP mode
#+BEGIN_SRC elisp
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook 
  (c-mode . lsp)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui 
    :requires (lsp-mode)
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :config
    (setq lsp-ui-sideline-ignore-duplicate t))
#+END_SRC
** Org Babel
#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (C . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)
#+END_SRC

Here is an example: 

#+BEGIN_SRC C :results value

#include <stdio.h>

int main(int argc, char *argv[])
{
    for (int i = 0; i < 100; i++)
    {
        printf("%d ", i);
    }
}

#+END_SRC

#+RESULTS:
: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99

** Dired 
#+BEGIN_SRC elisp
(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config 
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))
#+END_SRC

** Eshell
#+BEGIN_SRC elisp
(defun pwd-replace-home (pwd)
  "Replace home in PWD with tilde (~) character."
  (interactive)
  (let* ((home (expand-file-name (getenv "HOME")))
         (home-len (length home)))
    (if (and
         (>= (length pwd) home-len)
         (equal home (substring pwd 0 home-len)))
        (concat "~" (substring pwd home-len))
      pwd)))

(setq eshell-prompt-function (lambda ()
   (concat
    (propertize (pwd-replace-home (eshell/pwd)) 'face `(:foreground "blue"))
    (propertize " ")
    (propertize "❯" 'face `(:foreground "red"))
    (propertize "❯" 'face `(:foreground "yellow"))
    (propertize "❯" 'face `(:foreground "green"))
    (propertize " "))))
#+END_SRC

** Tabs
#+BEGIN_SRC elisp
(use-package centaur-tabs 
  :ensure t
  :config
  (setq centaur-tabs-style "bar"
        centaur-tabs-set-bar 'over
        centaur-tabs-set-modified-marker t
        centaur-tabs-set-icons t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+END_SRC

** Treemacs
#+BEGIN_SRC elisp
(use-package treemacs
  :ensure t
  :defer t)

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+END_SRC

** Clang format
#+BEGIN_SRC elisp
(use-package clang-format
  :ensure t
  :config
  (setq clang-format-style-option "file")
  :bind
  ("C-c f" . clang-format-buffer))
#+END_SRC
** Company
#+BEGIN_SRC elisp
(use-package company
:ensure t
:after lsp-mode
:hook (lsp-mode . company-mode)
:bind (:map company-active-map
            ("<tab>" . company-complete-selection))
(:map lsp-mode-map
      ("<tab>" . company-indent-or-complete-common))

:custom
(company-minimum-prefix-length 1)
(company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))


#+END_SRC
